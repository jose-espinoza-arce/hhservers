upstream haushaus_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
 
  server unix:/webapps/haushaus_django/run/gunicorn.sock fail_timeout=0;
}
 



#server {
#        listen 80;
#        server_name mail.haushaus.mx;

	
#	access_log   /var/log/nginx/mail.haushaus.mx.access.log;
#	error_log    /var/log/nginx/mail.haushaus.mx.error.log;

#	root /usr/share/roundcube;
#        index index.php;

#        location / {
#                try_files $uri $uri/ /index.php?$args;
#        }

#        location ~ \.php$ {
#                #try_files $uri =404;
#                #include fastcgi_params;
#                #fastcgi_pass 127.0.0.1:9000;
                
#		try_files $uri = 404;
#                #fastcgi_split_path_info ^(.+\.php)(/.+)$;
#                #fastcgi_pass 127.0.0.1:9000;
#		fastcgi_keep_conn on;
#		fastcgi_split_path_info       ^(.+\.php)(.+)$;
#		#fastcgi_param PATH_INFO       $fastcgi_path_info;
#		#fastcgi_param PATH_TRANSLATED    $document_root$fastcgi_path_info;
#		fastcgi_pass unix:/var/run/php5-fpm.sock;
#                fastcgi_index index.php;
#                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#                include fastcgi_params;
#        }

#}



#server {
#        listen 80;	
#	server_name vma.haushaus.mx;

#	access_log   /var/log/nginx/vma.haushaus.mx.access.log;
#	error_log    /var/log/nginx/vma.haushaus.mx.error.log;

#	root /usr/local/vimbadmin/public;
#	index index.php;

#	location / {
		#try_files $uri $uri/ /index.php?$args;
#	}

#	location ~ \.php$ {
#		#try_files $uri =404;
#		include fastcgi_params;
#		#fastcgi_pass localhost:9000;
#		try_files $uri = 404;
#	        fastcgi_split_path_info ^(.+\.php)(/.+)$;
#	       	fastcgi_pass unix:/var/run/php5-fpm.sock;
#	        fastcgi_index index.php;
#	        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#	        include fastcgi_params;
#	}

#}



server {
    listen   80;
    server_name store.haushaus.mx;
    root /var/www/magento/html;

    location / {
        index index.html index.php; 

	## If missing pass the URI to Magento's front handler
        try_files $uri $uri/ @handler; 
        expires max; ## Enable max file cache
	}

	## These locations need to be denied
	    location ^~ /app/                { deny all; }
	    location ^~ /includes/           { deny all; }
	    location ^~ /lib/                { deny all; }
	    location ^~ /media/downloadable/ { deny all; }
	    location ^~ /pkginfo/            { deny all; }
	    location ^~ /report/config.xml   { deny all; }
	    location ^~ /var/                { deny all; }

	## Allow admins only to view export directory
	## Set up the password for any username using this command:
	## htpasswd -c /etc/nginx/htpasswd magentoadmin

	    location /var/export/ { 
	        auth_basic           "Restricted";
	        auth_basic_user_file htpasswd; ## Defined at /etc/nginx/htpassword
	        autoindex            on;
	    }

	## Disable .htaccess and other hidden files
	    location  /. { 
	        return 404;
	    }

	## Magento uses a common front handler 
	    location @handler { 
	        rewrite / /index.php;
	    }

	## Forward paths like /js/index.php/x.js to relevant handler
	    location ~ .php/ { 
	        rewrite ^(.*.php)/ $1 last;
	    }

	## php-fpm parsing
	location ~ .php$ { 

	## Catch 404s that try_files miss
        if (!-e $request_filename) { rewrite / /index.php last; } 

	## Disable cache for php files
        expires        off;

	## php-fpm configuration
        fastcgi_pass   unix:/var/run/php5-fpm.sock;
        fastcgi_param  HTTPS $fastcgi_https;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;

	## Store code is located at Administration > Configuration > Manage Stores in your Magento Installation.
        fastcgi_param  MAGE_RUN_CODE default; 
        fastcgi_param  MAGE_RUN_TYPE store;

	## Tweak fastcgi buffers, just in case.
	fastcgi_buffer_size 128k;
	fastcgi_buffers 256 4k;
	fastcgi_busy_buffers_size 256k;
	fastcgi_temp_file_write_size 256k;
	}
}

server {

    listen 80;
    server_name blog.haushaus.mx;

    root /var/www/wordpress/html;
    index index.php index.html index.htm;

    location / {
       try_files $uri $uri/ /index.php?q=$uri&$args;
    }

    
    location ~ \.php$ {
        try_files $uri = 404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }



    # Error pages
    error_page 400 /400.html;
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /webapps/haushaus_django/static/;
    }


}


server {
 
    listen   80;
    server_name haushaus.mx www.haushaus.mx;
 
    root /var/www/wordpress/html;
    index index.php index.html index.htm;

    client_max_body_size 4G;
 
    access_log /webapps/haushaus_django/logs/nginx-access.log;
    error_log /webapps/haushaus_django/logs/nginx-error.log;
 
    location /static/ {
        alias   /webapps/haushaus_django/static/;
    }
    
    location /media/ {
        alias   /webapps/haushaus_django/media/;
    }
 
    location /blog/ {
	#root /var/www/wordpress/html;
	#index index.php index.html index.htm;

	try_files $uri $uri/ /index.php?q=$uri&$args;
    }

    location ~ \.php$ {
	try_files $uri = 404;
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	fastcgi_pass unix:/var/run/php5-fpm.sock;
	fastcgi_index index.php;
	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	include fastcgi_params;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 
        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;
 
        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;
 
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
 
        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://haushaus_app_server;
            break;
        }
    }
 
    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /webapps/haushaus_django/static/;
    }
}
